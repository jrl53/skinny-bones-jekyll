// MIXINS
// --------------------------------------------------

%tab-focus {
	// Default
	outline: thin dotted #333;
	// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}


//  Typography
// --------------------------------------------------

/*  Vertical Rhythm
	https://github.com/sturobson/Sassifaction

	In this mixin you can specify the font size in PX and 
	it will calculate the REM based on your $doc-font-size 
	& $doc-line-height variables. 

		@include font-size(24);

	It will also create a bottom margin based on the 
	$doc-font-size & $doc-line-height variables unless you 
	specify that it shouldn't have one.

		@include font-size(24, no);

	Or if you want to specify a different bottom margin to 
	be generated.

		@include font-size(24,32);

	This mixin also generates a pixel-less line height by 
	default unless you specify that you either don't want 
	one where I'd suggest declaring 1 within the mixin.

		@include font-size(24, yes, 1);

	There's also the option to specify a different line-height 
	for it to generate to, where you would specify the 
	line-height in (effectively) it's pixel value.

		@include font-size(24, yes, 40);
*/

@mixin font-size($size, $margin: yes, $line-height: $doc-line-height) {
		
	// generates the font-size in REMs with a PX fallback
	font-size: 0px + $size;
	font-size: 0rem + $size / $doc-font-size;

	// line-height functions
	////////////////////////

	// if you a line-height is specified in the mixin
	@if $line-height != $doc-line-height and $line-height != 1 {
		line-height: ceil($size / $line-height) * ($line-height / $size);
	}
	
	// if $line-height == 1
	// because, typing 1 is quicker than 16
	@else if $line-height == 1 {
		line-height: 1;
	}

	// normal $line-height
	// if the line-height is left.
	@else {
		line-height: ceil($size / $doc-line-height) * ($doc-line-height / $size);
	}

	// margin-bottom functions
	//////////////////////////

	// if no is bottom margin is required
	@if $margin == no {
		margin-bottom: 0;  
	}  
	
	// if a specific bottom margin is required
	@else if $margin != yes and $margin != no {
		margin-bottom: 0px + $margin;
		margin-bottom: 0rem + ($margin / $doc-font-size);  
	}

	// if you're keeping the vertical rhythm with the margin
	@else {
		margin-bottom: 0px + $doc-line-height;
		margin-bottom: 0rem + ($doc-line-height / $doc-font-size);  
	}
}


/* ==========================================================================
   Rounded corners
   ========================================================================== */



/* 
   Round all corners
   example: @include rounded(4px);
   ========================================================================== */

@mixin rounded($radius:4px) {
  border-radius : $radius; 
}

/* 
   Round individual corners (top right, bottom right, bottom left, top left)
   example: @include border-radius(4px, 0, 0, 4px);
   ========================================================================== */

@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  border-top-right-radius: $topright;
  border-bottom-right-radius: $bottomright;
  border-bottom-left-radius: $bottomleft;
  border-top-left-radius: $topleft;
  -webkit-background-clip: padding-box;
  -moz-background-clip: padding;  
  background-clip: padding-box; 
}



/* 
   Just font-size (REMs + pixel fallback)
   example: @include font-rem(16);
   ========================================================================== */

@mixin font-rem($size) {
  font-size: 0px + $size;
  font-size: 0rem + $size / $doc-font-size;
}


/* ==========================================================================
   Grid mixins
   ========================================================================== */

/* 
   Define number of columns in the grid
   Common values would be 12, 16 or 24
   ========================================================================== */

$width: 100%;
$def_grid: 12;
$margin: 0;

@mixin container(){
  margin:0 auto;
  width:$width;
}

/* 
   Works out the width of elements based on total number of columns and width
   number of columns being displayed. Removes 20px for margins.
   ========================================================================== */

@mixin grid($grid:$def_grid,$cols:'',$float:left,$display:inline){
  display:$display;
  float:$float;
  width:(100%/$grid * $cols) - ($margin * 2);
}  

/* 
   Add x amount of column padding before an element
   Example: @include prefix(1,12);
   ========================================================================== */

@mixin prefix($grid:$def_grid,$cols:''){
  margin-left:(100%/$grid * $cols);
}

/* 
   Add x amount of column padding after an element
   Example: @include suffix(2,12);
   ========================================================================== */

@mixin suffix($grid:$def_grid,$cols:''){  
  margin-right:(100%/$grid * $cols);    
}

/* 
   Remove left margin
   Example: @include first;
   ========================================================================== */

@mixin first(){
  margin-left:0;
}

/* 
   Remove right margin
   Example: @include last;
   ========================================================================== */

@mixin last(){
  margin-right:0;
}

/* 
   Push an element x amount of column(s) to the right
   Example: @include push(2,12);
   ========================================================================== */

@mixin push($grid:$def_grid,$move:'') {
  position:relative;
  left:(100%/$grid * $move);
} 

/* 
   Pull an element x amount of column(s) to the left
   Example: @include pull(1,12);
   ========================================================================== */

@mixin pull($grid:$def_grid,$move:''){
  position:relative;
  left:(100%/$grid * $move) * -1;
}
